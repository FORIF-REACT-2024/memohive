// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   email     String   @unique
//   username  String   @unique
//   createdAt DateTime @default(now())
//   boards    Board[]
//   Memo      Memo[]
// }

model Board {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  summary   String?
  memos     Memo[]
}

model Memo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String   @db.ObjectId
  document  String?
  color     String?
}

// At initial, run prisma generate to add models

// Whenever you update your Prisma schema, 
// you will need to run the "npx prisma db push" command to create new indexes and regenerate Prisma Client.

// If server pushes underlying Error,
// Prisma needs to perform transactions, which requires your MongoDB server to be run as a replica set.
// Then see https://medium.com/@engr.omoalfa/enable-replica-set-automatically-on-your-local-mongodb-server-b9136c2f475a

// Prisma GoogleAuth Adapter

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  Memo          Memo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
